{"version":3,"file":"lib.umd.js","sources":["../src/index.ts"],"sourcesContent":["import axios from 'axios'\nimport {\n  StorageInfo,\n  GetQuoteArgs,\n  GetQuoteResult,\n  GetStatusResult,\n  GetLinkResult,\n  RegisterArgs\n} from './types'\n\n/**\n * DBSClient is a TypeScript library for interacting with the DBS API.\n */\nclass DBSClient {\n  private baseURL: string\n\n  /**\n   * Creates an instance of the DBSClient.\n   *\n   * @param {string} baseURL - The base URL of the DBS API.\n   */\n  constructor(baseURL: string) {\n    this.baseURL = baseURL\n  }\n\n  /**\n   * Fetches information about supported storage types and payments.\n   *\n   * @returns {Promise<StorageInfo[]>} - A promise that resolves to an array of storage information.\n   */\n  async getStorageInfo(): Promise<StorageInfo[]> {\n    const response = await axios.get<StorageInfo[]>(`${this.baseURL}/`)\n    return response.data\n  }\n\n  /**\n   * Fetches a quote for storing files on a specific storage.\n   *\n   * @param {GetQuoteArgs} args - The arguments needed for getting a quote.\n   * @returns {Promise<GetQuoteResult>} - A promise that resolves to the quote result.\n   */\n  async getQuote(args: GetQuoteArgs): Promise<GetQuoteResult> {\n    const response = await axios.post<GetQuoteResult>(`${this.baseURL}/getQuote`, args)\n    return response.data\n  }\n\n  /**\n   * Uploads files according to the quote request.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @param {number} nonce - A timestamp (must be higher than the previously stored nonce for the user).\n   * @param {string} signature - A user-signed hash of SHA256(quoteId + nonce).\n   * @param {File[]} files - An array of files to upload.\n   * @returns {Promise<void>}\n   */\n  async upload(\n    quoteId: string,\n    nonce: number,\n    signature: string,\n    files: File[]\n  ): Promise<void> {\n    const formData = new FormData()\n    files.forEach((file, index) => {\n      formData.append(`file${index}`, new Blob([new ArrayBuffer(file.length)]))\n    })\n\n    await axios.post(`${this.baseURL}/upload`, formData, {\n      params: { quoteId, nonce, signature },\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n  }\n\n  /**\n   * Fetches the status of a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @returns {Promise<GetStatusResult>} - A promise that resolves to the status result.\n   */\n  async getStatus(quoteId: string): Promise<GetStatusResult> {\n    const response = await axios.post<GetStatusResult>(`${this.baseURL}/getStatus`, {\n      quoteId\n    })\n    return response.data\n  }\n\n  /**\n   * Fetches the DDO files object for a job.\n   *\n   * @param {string} quoteId - The quote ID.\n   * @param {number} nonce - A timestamp (must be higher than the previously stored nonce for the user).\n   * @param {string} signature - A user-signed hash of SHA256(quoteId + nonce).\n   * @returns {Promise<GetLinkResult[]>} - A promise that resolves to an array of link results.\n   */\n\n  async getLink(\n    quoteId: string,\n    nonce: number,\n    signature: string\n  ): Promise<GetLinkResult[]> {\n    const response = await axios.post<GetLinkResult[]>(`${this.baseURL}/getLink`, null, {\n      params: { quoteId, nonce, signature }\n    })\n    return response.data\n  }\n\n  /**\n   * Registers a new microservice that handles a storage type.\n   *\n   * @param {RegisterArgs} args - The arguments needed for registering a microservice.\n   * @returns {Promise<void>}\n   */\n  async registerMicroservice(args: RegisterArgs): Promise<void> {\n    await axios.post(`${this.baseURL}/register`, args)\n  }\n}\n\nexport default DBSClient\n"],"names":["DBSClient","baseURL","this","_proto","prototype","getStorageInfo","Promise","resolve","axios","get","then","response","data","e","reject","getQuote","args","post","upload","quoteId","nonce","signature","files","formData","FormData","forEach","file","index","append","Blob","ArrayBuffer","length","params","headers","getStatus","getLink","registerMicroservice"],"mappings":";OAqBE,WAAA,SAAAA,EAAYC,QAPJA,aAAO,EAQbC,KAAKD,QAAUA,CACjB,CAAC,IAAAE,EAAAH,EAAAI,iBAAAD,EAOKE,0BAAc,IACqCC,OAAAA,QAAAC,QAAhCC,EAAAA,QAAMC,IAAsBP,KAAKD,cAAWS,KAA7DC,SAAAA,GACN,OAAOA,EAASC,IAAI,EACtB,CAAC,MAAAC,GAAAP,OAAAA,QAAAQ,OAAAD,KAAAV,EAQKY,SAAQA,SAACC,GAAkB,WAC0BV,QAAAC,QAAlCC,EAAK,QAACS,KAAwBf,KAAKD,QAAO,YAAae,IAAKN,KAA7EC,SAAAA,GACN,OAAOA,EAASC,IAAI,EACtB,CAAC,MAAAC,GAAAP,OAAAA,QAAAQ,OAAAD,EAAA,CAAA,EAAAV,EAWKe,OAAMA,SACVC,EACAC,EACAC,EACAC,GAAa,IAAA,IAEPC,EAAW,IAAIC,SAGnB,OAFFF,EAAMG,QAAQ,SAACC,EAAMC,GACnBJ,EAASK,cAAcD,EAAS,IAAIE,KAAK,CAAC,IAAIC,YAAYJ,EAAKK,UACjE,GAAEzB,QAAAC,QAEIC,EAAK,QAACS,KAAQf,KAAKD,QAAO,UAAWsB,EAAU,CACnDS,OAAQ,CAAEb,QAAAA,EAASC,MAAAA,EAAOC,UAAAA,GAC1BY,QAAS,CAAE,eAAgB,0BAC3BvB,KACJ,WAAA,EAAA,CAAC,MAAAG,GAAA,OAAAP,QAAAQ,OAAAD,EAAA,CAAA,EAAAV,EAQK+B,mBAAUf,OAC4Cb,OAAAA,QAAAC,QAAnCC,EAAK,QAACS,KAAyBf,KAAKD,QAAqB,aAAA,CAC9EkB,QAAAA,KACAT,KAFIC,SAAAA,GAGN,OAAOA,EAASC,IAAI,EACtB,CAAC,MAAAC,UAAAP,QAAAQ,OAAAD,EAAA,CAAA,EAAAV,EAWKgC,iBACJhB,EACAC,EACAC,GAAiB,IAEyC,OAAAf,QAAAC,QAAnCC,EAAK,QAACS,KAAyBf,KAAKD,QAAO,WAAY,KAAM,CAClF+B,OAAQ,CAAEb,QAAAA,EAASC,MAAAA,EAAOC,UAAAA,MAC1BX,cAFIC,GAGN,OAAOA,EAASC,IAAI,EACtB,CAAC,MAAAC,GAAA,OAAAP,QAAAQ,OAAAD,EAAA,CAAA,EAAAV,EAQKiC,8BAAqBpB,OACD,OAAAV,QAAAC,QAAlBC,EAAAA,QAAMS,KAAQf,KAAKD,QAAoBe,YAAAA,IAAKN,KACpD,WAAA,EAAA,CAAC,MAAAG,UAAAP,QAAAQ,OAAAD,KAAAb,CAAA,CA5FD"}